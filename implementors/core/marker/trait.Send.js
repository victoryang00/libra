(function() {var implementors = {};
implementors["abigen"] = [{"text":"impl Send for AbigenOptions","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for Abigen&lt;'env&gt;","synthetic":true,"types":[]}];
implementors["accumulator"] = [{"text":"impl&lt;R, H&gt; Send for MerkleAccumulator&lt;R, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backup_cli"] = [{"text":"impl Send for EpochEndingBackupOpt","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingBackupController","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingChunk","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingBackup","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingRestoreOpt","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingRestoreController","synthetic":true,"types":[]},{"text":"impl Send for PreheatedEpochEndingRestore","synthetic":true,"types":[]},{"text":"impl Send for EpochHistory","synthetic":true,"types":[]},{"text":"impl Send for EpochHistoryRestoreController","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotBackupOpt","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotBackupController","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotChunk","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotBackup","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotRestoreOpt","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotRestoreController","synthetic":true,"types":[]},{"text":"impl Send for TransactionBackupOpt","synthetic":true,"types":[]},{"text":"impl Send for TransactionBackupController","synthetic":true,"types":[]},{"text":"impl Send for TransactionChunk","synthetic":true,"types":[]},{"text":"impl Send for TransactionBackup","synthetic":true,"types":[]},{"text":"impl Send for TransactionRestoreOpt","synthetic":true,"types":[]},{"text":"impl Send for TransactionRestoreController","synthetic":true,"types":[]},{"text":"impl Send for PreheatedTransactionRestore","synthetic":true,"types":[]},{"text":"impl Send for TransactionRestoreBatchController","synthetic":true,"types":[]},{"text":"impl Send for BackupCoordinatorOpt","synthetic":true,"types":[]},{"text":"impl Send for BackupCoordinator","synthetic":true,"types":[]},{"text":"impl Send for RestoreCoordinatorOpt","synthetic":true,"types":[]},{"text":"impl Send for RestoreCoordinator","synthetic":true,"types":[]},{"text":"impl Send for VerifyCoordinator","synthetic":true,"types":[]},{"text":"impl Send for EpochEndingBackupMeta","synthetic":true,"types":[]},{"text":"impl Send for StateSnapshotBackupMeta","synthetic":true,"types":[]},{"text":"impl Send for TransactionBackupMeta","synthetic":true,"types":[]},{"text":"impl Send for MetadataCacheOpt","synthetic":true,"types":[]},{"text":"impl Send for MetadataView","synthetic":true,"types":[]},{"text":"impl Send for BackupStorageState","synthetic":true,"types":[]},{"text":"impl Send for ShellSafeName","synthetic":true,"types":[]},{"text":"impl Send for TextLine","synthetic":true,"types":[]},{"text":"impl Send for StorageOpt","synthetic":true,"types":[]},{"text":"impl Send for CommandAdapterOpt","synthetic":true,"types":[]},{"text":"impl Send for CommandAdapter","synthetic":true,"types":[]},{"text":"impl Send for LocalFsOpt","synthetic":true,"types":[]},{"text":"impl Send for LocalFs","synthetic":true,"types":[]},{"text":"impl Send for GlobalBackupOpt","synthetic":true,"types":[]},{"text":"impl Send for RocksdbOpt","synthetic":true,"types":[]},{"text":"impl Send for GlobalRestoreOpt","synthetic":true,"types":[]},{"text":"impl Send for GlobalRestoreOptions","synthetic":true,"types":[]},{"text":"impl Send for TrustedWaypointOpt","synthetic":true,"types":[]},{"text":"impl Send for RestoreRunMode","synthetic":true,"types":[]},{"text":"impl Send for BackupServiceClientOpt","synthetic":true,"types":[]},{"text":"impl Send for BackupServiceClient","synthetic":true,"types":[]}];
implementors["boogie_backend"] = [{"text":"impl&lt;'env&gt; !Send for BoogieTranslator&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for ModuleTranslator&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoogieOptions","synthetic":true,"types":[]}];
implementors["borrow_graph"] = [{"text":"impl&lt;Loc, Lbl&gt; Send for BorrowGraph&lt;Loc, Lbl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Lbl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RefID","synthetic":true,"types":[]}];
implementors["bounded_executor"] = [{"text":"impl Send for BoundedExecutor","synthetic":true,"types":[]}];
implementors["bytecode"] = [{"text":"impl !Send for Annotations","synthetic":true,"types":[]},{"text":"impl Send for BorrowInfo","synthetic":true,"types":[]},{"text":"impl Send for BorrowInfoAtCodeOffset","synthetic":true,"types":[]},{"text":"impl Send for BorrowAnnotation","synthetic":true,"types":[]},{"text":"impl Send for BorrowAnalysisProcessor","synthetic":true,"types":[]},{"text":"impl Send for CleanAndOptimizeProcessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SummaryCache&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Elem&gt; Send for SetDomain&lt;Elem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for MapDomain&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for BlockState&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;State: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for JoinResult","synthetic":true,"types":[]},{"text":"impl Send for DebugInstrumenter","synthetic":true,"types":[]},{"text":"impl Send for EliminateImmRefsProcessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for EliminateImmRefs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EliminateMutRefsProcessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for EliminateMutRefs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for FunctionDataBuilder&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for FunctionTarget&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl !Send for FunctionData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for FunctionDataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for FunctionTargetsHolder","synthetic":true,"types":[]},{"text":"impl !Send for FunctionTargetPipeline","synthetic":true,"types":[]},{"text":"impl Send for FunctionVariant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Reducible&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Graph&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LiveVarInfoAtCodeOffset","synthetic":true,"types":[]},{"text":"impl Send for LiveVarAnnotation","synthetic":true,"types":[]},{"text":"impl Send for LiveVarAnalysisProcessor","synthetic":true,"types":[]},{"text":"impl Send for MemoryInstrumentationProcessor","synthetic":true,"types":[]},{"text":"impl Send for ProverOptions","synthetic":true,"types":[]},{"text":"impl Send for PackedTypesProcessor","synthetic":true,"types":[]},{"text":"impl Send for ReachingDefAnnotation","synthetic":true,"types":[]},{"text":"impl Send for ReachingDefProcessor","synthetic":true,"types":[]},{"text":"impl Send for Def","synthetic":true,"types":[]},{"text":"impl Send for SpecInstrumenter","synthetic":true,"types":[]},{"text":"impl Send for Label","synthetic":true,"types":[]},{"text":"impl Send for AttrId","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockId","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for BytecodeDisplay&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for OperationDisplay&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for BorrowNodeDisplay&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for AssignKind","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for Operation","synthetic":true,"types":[]},{"text":"impl Send for BorrowNode","synthetic":true,"types":[]},{"text":"impl Send for PropKind","synthetic":true,"types":[]},{"text":"impl Send for Bytecode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StacklessBytecodeGenerator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StacklessControlFlowGraph","synthetic":true,"types":[]},{"text":"impl Send for UsageProcessor","synthetic":true,"types":[]}];
implementors["bytecode_source_map"] = [{"text":"impl&lt;Location&gt; Send for SourceMapping&lt;Location&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Location: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FunctionMarking","synthetic":true,"types":[]},{"text":"impl Send for StructMarking","synthetic":true,"types":[]},{"text":"impl Send for MarkedSourceMapping","synthetic":true,"types":[]},{"text":"impl&lt;Location&gt; Send for StructSourceMap&lt;Location&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Location: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Location&gt; Send for FunctionSourceMap&lt;Location&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Location: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Location&gt; Send for SourceMap&lt;Location&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Location: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OwnedLoc","synthetic":true,"types":[]}];
implementors["bytecode_verifier"] = [{"text":"impl&lt;'a&gt; Send for DuplicationChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CodeUnitVerifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for VMControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DependencyChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CyclicModuleDependencyChecker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstantiationLoopChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstructionConsistency&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ResourceTransitiveChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SignatureChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecursiveStructDefChecker&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, M&gt; Send for Sender&lt;K, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, M&gt; Send for Receiver&lt;K, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for ElementStatus&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for QueueStyle","synthetic":true,"types":[]}];
implementors["cli"] = [{"text":"impl Send for AccountData","synthetic":true,"types":[]},{"text":"impl Send for AccountStatus","synthetic":true,"types":[]},{"text":"impl Send for AddressAndIndex","synthetic":true,"types":[]},{"text":"impl Send for IndexAndSequence","synthetic":true,"types":[]},{"text":"impl Send for ClientProxy","synthetic":true,"types":[]},{"text":"impl Send for AccountEntry","synthetic":true,"types":[]}];
implementors["cluster_test"] = [{"text":"impl Send for AtomicHistogramAccumulator","synthetic":true,"types":[]},{"text":"impl Send for AtomicHistogramSnapshot","synthetic":true,"types":[]},{"text":"impl Send for Cluster","synthetic":true,"types":[]},{"text":"impl Send for ClusterBuilderParams","synthetic":true,"types":[]},{"text":"impl Send for ClusterBuilder","synthetic":true,"types":[]},{"text":"impl Send for ClusterSwarmKube","synthetic":true,"types":[]},{"text":"impl Send for KubeNode","synthetic":true,"types":[]},{"text":"impl Send for NetworkDelay","synthetic":true,"types":[]},{"text":"impl Send for PacketLoss","synthetic":true,"types":[]},{"text":"impl Send for StopValidator","synthetic":true,"types":[]},{"text":"impl Send for CompatibilityTest","synthetic":true,"types":[]},{"text":"impl Send for CompatiblityTestParams","synthetic":true,"types":[]},{"text":"impl Send for LoadTestParams","synthetic":true,"types":[]},{"text":"impl Send for PacketLossRandomValidators","synthetic":true,"types":[]},{"text":"impl Send for PacketLossRandomValidatorsParams","synthetic":true,"types":[]},{"text":"impl Send for PerformanceBenchmark","synthetic":true,"types":[]},{"text":"impl Send for PerformanceBenchmarkParams","synthetic":true,"types":[]},{"text":"impl Send for PerformanceBenchmarkThreeRegionSimulation","synthetic":true,"types":[]},{"text":"impl Send for PerformanceBenchmarkThreeRegionSimulationParams","synthetic":true,"types":[]},{"text":"impl Send for RebootCluster","synthetic":true,"types":[]},{"text":"impl Send for RebootClusterParams","synthetic":true,"types":[]},{"text":"impl Send for RebootRandomValidators","synthetic":true,"types":[]},{"text":"impl Send for RebootRandomValidatorsParams","synthetic":true,"types":[]},{"text":"impl Send for Reconfiguration","synthetic":true,"types":[]},{"text":"impl Send for ReconfigurationParams","synthetic":true,"types":[]},{"text":"impl Send for RecoveryTime","synthetic":true,"types":[]},{"text":"impl Send for RecoveryTimeParams","synthetic":true,"types":[]},{"text":"impl Send for TwinValidators","synthetic":true,"types":[]},{"text":"impl Send for TwinValidatorsParams","synthetic":true,"types":[]},{"text":"impl Send for ValidatorVersioning","synthetic":true,"types":[]},{"text":"impl Send for ValidatorVersioningParams","synthetic":true,"types":[]},{"text":"impl Send for CpuFlamegraph","synthetic":true,"types":[]},{"text":"impl Send for CpuFlamegraphParams","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GenesisHelper","synthetic":true,"types":[]},{"text":"impl Send for CommitInfo","synthetic":true,"types":[]},{"text":"impl Send for GitCommitInfo","synthetic":true,"types":[]},{"text":"impl Send for Author","synthetic":true,"types":[]},{"text":"impl Send for GitHub","synthetic":true,"types":[]},{"text":"impl Send for CommitHistoryHealthCheck","synthetic":true,"types":[]},{"text":"impl Send for DebugPortLogWorker","synthetic":true,"types":[]},{"text":"impl Send for FullNodeHealthCheck","synthetic":true,"types":[]},{"text":"impl Send for LivenessHealthCheck","synthetic":true,"types":[]},{"text":"impl Send for LogTail","synthetic":true,"types":[]},{"text":"impl Send for TraceTail","synthetic":true,"types":[]},{"text":"impl Send for Commit","synthetic":true,"types":[]},{"text":"impl Send for ValidatorEvent","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckRunner","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckContext","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckError","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for PrintFailures","synthetic":true,"types":[]},{"text":"impl Send for ValidatorGroup","synthetic":true,"types":[]},{"text":"impl Send for InstanceConfig","synthetic":true,"types":[]},{"text":"impl Send for VaultConfig","synthetic":true,"types":[]},{"text":"impl Send for LSRConfig","synthetic":true,"types":[]},{"text":"impl Send for ValidatorConfig","synthetic":true,"types":[]},{"text":"impl Send for FullnodeConfig","synthetic":true,"types":[]},{"text":"impl Send for Instance","synthetic":true,"types":[]},{"text":"impl Send for ApplicationConfig","synthetic":true,"types":[]},{"text":"impl Send for Prometheus","synthetic":true,"types":[]},{"text":"impl Send for MatrixResponse","synthetic":true,"types":[]},{"text":"impl Send for TimeSeries","synthetic":true,"types":[]},{"text":"impl Send for SuiteReport","synthetic":true,"types":[]},{"text":"impl Send for ReportedMetric","synthetic":true,"types":[]},{"text":"impl Send for SlackClient","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrometheusRangeView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ExperimentSuite","synthetic":true,"types":[]},{"text":"impl Send for TxEmitter","synthetic":true,"types":[]},{"text":"impl Send for EmitJob","synthetic":true,"types":[]},{"text":"impl Send for TxStats","synthetic":true,"types":[]},{"text":"impl Send for TxStatsRate","synthetic":true,"types":[]},{"text":"impl Send for EmitThreadParams","synthetic":true,"types":[]},{"text":"impl Send for EmitJobRequest","synthetic":true,"types":[]},{"text":"impl Send for AccountData","synthetic":true,"types":[]},{"text":"impl Send for InvalidTxType","synthetic":true,"types":[]}];
implementors["compiled_stdlib"] = [{"text":"impl Send for StdLibOptions","synthetic":true,"types":[]},{"text":"impl Send for CompiledBytes","synthetic":true,"types":[]},{"text":"impl Send for StdlibScript","synthetic":true,"types":[]}];
implementors["compiler"] = [{"text":"impl Send for Compiler","synthetic":true,"types":[]}];
implementors["consensus"] = [{"text":"impl Send for ConsensusNetworkSender","synthetic":true,"types":[]},{"text":"impl Send for ConsensusMsg","synthetic":true,"types":[]}];
implementors["consensus_types"] = [{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for BlockData","synthetic":true,"types":[]},{"text":"impl Send for BlockDataHasher","synthetic":true,"types":[]},{"text":"impl Send for BlockType","synthetic":true,"types":[]},{"text":"impl Send for BlockRetrievalRequest","synthetic":true,"types":[]},{"text":"impl Send for BlockRetrievalResponse","synthetic":true,"types":[]},{"text":"impl Send for BlockRetrievalStatus","synthetic":true,"types":[]},{"text":"impl Send for EpochRetrievalRequest","synthetic":true,"types":[]},{"text":"impl Send for ExecutedBlock","synthetic":true,"types":[]},{"text":"impl Send for ProposalMsg","synthetic":true,"types":[]},{"text":"impl Send for QuorumCert","synthetic":true,"types":[]},{"text":"impl Send for SafetyData","synthetic":true,"types":[]},{"text":"impl Send for SyncInfo","synthetic":true,"types":[]},{"text":"impl Send for Timeout","synthetic":true,"types":[]},{"text":"impl Send for TimeoutHasher","synthetic":true,"types":[]},{"text":"impl Send for TimeoutCertificate","synthetic":true,"types":[]},{"text":"impl Send for Vote","synthetic":true,"types":[]},{"text":"impl Send for VoteData","synthetic":true,"types":[]},{"text":"impl Send for VoteDataHasher","synthetic":true,"types":[]},{"text":"impl Send for VoteMsg","synthetic":true,"types":[]},{"text":"impl Send for VoteProposal","synthetic":true,"types":[]},{"text":"impl Send for VoteProposalHasher","synthetic":true,"types":[]},{"text":"impl Send for MaybeSignedVoteProposal","synthetic":true,"types":[]}];
implementors["crash_handler"] = [{"text":"impl Send for CrashInfo","synthetic":true,"types":[]}];
implementors["datatest_stable"] = [{"text":"impl Send for Requirements","synthetic":true,"types":[]}];
implementors["debug_interface"] = [{"text":"impl Send for NodeDebugClient","synthetic":true,"types":[]},{"text":"impl Send for AsyncNodeDebugClient","synthetic":true,"types":[]},{"text":"impl Send for NodeDebugService","synthetic":true,"types":[]}];
implementors["diem_bitvec"] = [{"text":"impl Send for BitVec","synthetic":true,"types":[]}];
implementors["diem_config"] = [{"text":"impl Send for ConsensusConfig","synthetic":true,"types":[]},{"text":"impl Send for LeaderReputationConfig","synthetic":true,"types":[]},{"text":"impl Send for DebugInterfaceConfig","synthetic":true,"types":[]},{"text":"impl Send for DiemTraceConfig","synthetic":true,"types":[]},{"text":"impl Send for ExecutionConfig","synthetic":true,"types":[]},{"text":"impl Send for RemoteExecutionService","synthetic":true,"types":[]},{"text":"impl Send for KeyManagerConfig","synthetic":true,"types":[]},{"text":"impl Send for LoggerConfig","synthetic":true,"types":[]},{"text":"impl Send for MetricsConfig","synthetic":true,"types":[]},{"text":"impl Send for MempoolConfig","synthetic":true,"types":[]},{"text":"impl Send for NetworkConfig","synthetic":true,"types":[]},{"text":"impl Send for IdentityFromConfig","synthetic":true,"types":[]},{"text":"impl Send for IdentityFromStorage","synthetic":true,"types":[]},{"text":"impl Send for RateLimitConfig","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcConfig","synthetic":true,"types":[]},{"text":"impl Send for GitHubConfig","synthetic":true,"types":[]},{"text":"impl Send for VaultConfig","synthetic":true,"types":[]},{"text":"impl Send for OnDiskStorageConfig","synthetic":true,"types":[]},{"text":"impl Send for TokenFromConfig","synthetic":true,"types":[]},{"text":"impl Send for TokenFromDisk","synthetic":true,"types":[]},{"text":"impl Send for StateSyncConfig","synthetic":true,"types":[]},{"text":"impl Send for RocksdbConfig","synthetic":true,"types":[]},{"text":"impl Send for StorageConfig","synthetic":true,"types":[]},{"text":"impl Send for SafetyRulesConfig","synthetic":true,"types":[]},{"text":"impl Send for RemoteService","synthetic":true,"types":[]},{"text":"impl Send for SafetyRulesTestConfig","synthetic":true,"types":[]},{"text":"impl Send for UpstreamConfig","synthetic":true,"types":[]},{"text":"impl Send for PeerNetworkId","synthetic":true,"types":[]},{"text":"impl Send for TestConfig","synthetic":true,"types":[]},{"text":"impl Send for NodeConfig","synthetic":true,"types":[]},{"text":"impl Send for BaseConfig","synthetic":true,"types":[]},{"text":"impl Send for ParseRoleError","synthetic":true,"types":[]},{"text":"impl Send for RootPath","synthetic":true,"types":[]},{"text":"impl Send for ConsensusProposerType","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ExecutionCorrectnessService","synthetic":true,"types":[]},{"text":"impl Send for DiscoveryMethod","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl Send for SecureBackend","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for SafetyRulesService","synthetic":true,"types":[]},{"text":"impl Send for WaypointConfig","synthetic":true,"types":[]},{"text":"impl Send for RoleType","synthetic":true,"types":[]},{"text":"impl Send for ValidatorSwarm","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConfigKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NetworkContext","synthetic":true,"types":[]},{"text":"impl Send for NodeNetworkId","synthetic":true,"types":[]},{"text":"impl Send for NetworkId","synthetic":true,"types":[]}];
implementors["diem_crypto"] = [{"text":"impl Send for Sha3_256","synthetic":true,"types":[]},{"text":"impl Send for Ed25519PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for Ed25519PublicKey","synthetic":true,"types":[]},{"text":"impl Send for Ed25519Signature","synthetic":true,"types":[]},{"text":"impl Send for HashValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HashValueBitIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TransactionAccumulatorHasher","synthetic":true,"types":[]},{"text":"impl Send for EventAccumulatorHasher","synthetic":true,"types":[]},{"text":"impl Send for SparseMerkleInternalHasher","synthetic":true,"types":[]},{"text":"impl Send for VoteProposalHasher","synthetic":true,"types":[]},{"text":"impl Send for TestOnlyHasher","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Hkdf&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HkdfError","synthetic":true,"types":[]},{"text":"impl Send for MultiEd25519PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for MultiEd25519PublicKey","synthetic":true,"types":[]},{"text":"impl Send for MultiEd25519Signature","synthetic":true,"types":[]},{"text":"impl Send for NoiseConfig","synthetic":true,"types":[]},{"text":"impl Send for InitiatorHandshakeState","synthetic":true,"types":[]},{"text":"impl Send for ResponderHandshakeState","synthetic":true,"types":[]},{"text":"impl Send for NoiseSession","synthetic":true,"types":[]},{"text":"impl Send for NoiseError","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for KeyPair&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TestDiemCrypto","synthetic":true,"types":[]},{"text":"impl Send for TestDiemCryptoHasher","synthetic":true,"types":[]},{"text":"impl Send for CryptoMaterialError","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]}];
implementors["diem_events_fetcher"] = [{"text":"impl Send for DiemEventsFetcher","synthetic":true,"types":[]}];
implementors["diem_faucet"] = [{"text":"impl Send for MintParams","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]}];
implementors["diem_fuzzer"] = [{"text":"impl Send for FuzzTarget","synthetic":true,"types":[]}];
implementors["diem_genesis_tool"] = [{"text":"impl Send for Command","synthetic":true,"types":[]},{"text":"impl Send for CommandName","synthetic":true,"types":[]},{"text":"impl Send for Layout","synthetic":true,"types":[]},{"text":"impl Send for SetLayout","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ValidatorBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FullnodeBuilder","synthetic":true,"types":[]},{"text":"impl Send for FullnodeType","synthetic":true,"types":[]},{"text":"impl Send for SwarmConfig","synthetic":true,"types":[]}];
implementors["diem_github_client"] = [{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["diem_infallible"] = [{"text":"impl&lt;T&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["diem_jellyfish_merkle"] = [{"text":"impl Send for MissingRootError","synthetic":true,"types":[]},{"text":"impl Send for NodeStats","synthetic":true,"types":[]},{"text":"impl Send for StaleNodeIndex","synthetic":true,"types":[]},{"text":"impl Send for TreeUpdateBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for JellyfishMerkleTree&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for JellyfishMerkleIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeKey","synthetic":true,"types":[]},{"text":"impl Send for Child","synthetic":true,"types":[]},{"text":"impl Send for InternalNode","synthetic":true,"types":[]},{"text":"impl Send for LeafNode","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for NodeDecodeError","synthetic":true,"types":[]},{"text":"impl !Send for JellyfishMerkleRestore","synthetic":true,"types":[]}];
implementors["diem_json_rpc_client"] = [{"text":"impl Send for JsonRpcClient","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcAsyncClient","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcBatch","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcAsyncClientError","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcResponse","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Client&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BroadcastHttpClient","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Response&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SimpleHttpClient","synthetic":true,"types":[]},{"text":"impl Send for Retry","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for StateManager","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for UnexpectedError","synthetic":true,"types":[]},{"text":"impl Send for WaitForTransactionError","synthetic":true,"types":[]}];
implementors["diem_json_rpc_types"] = [{"text":"impl Send for JsonRpcError","synthetic":true,"types":[]},{"text":"impl Send for ServerCode","synthetic":true,"types":[]},{"text":"impl Send for InvalidRequestCode","synthetic":true,"types":[]},{"text":"impl Send for ErrorData","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcResponse","synthetic":true,"types":[]},{"text":"impl Send for AmountView","synthetic":true,"types":[]},{"text":"impl Send for AccountView","synthetic":true,"types":[]},{"text":"impl Send for EventView","synthetic":true,"types":[]},{"text":"impl Send for EventWithProofView","synthetic":true,"types":[]},{"text":"impl Send for MetadataView","synthetic":true,"types":[]},{"text":"impl Send for BytesView","synthetic":true,"types":[]},{"text":"impl Send for MoveAbortExplanationView","synthetic":true,"types":[]},{"text":"impl Send for TransactionView","synthetic":true,"types":[]},{"text":"impl Send for TransactionsWithProofsView","synthetic":true,"types":[]},{"text":"impl Send for TransactionsProofsView","synthetic":true,"types":[]},{"text":"impl Send for ScriptView","synthetic":true,"types":[]},{"text":"impl Send for CurrencyInfoView","synthetic":true,"types":[]},{"text":"impl Send for StateProofView","synthetic":true,"types":[]},{"text":"impl Send for AccountStateWithProofView","synthetic":true,"types":[]},{"text":"impl Send for AccountStateProofView","synthetic":true,"types":[]},{"text":"impl Send for AccountRoleView","synthetic":true,"types":[]},{"text":"impl Send for EventDataView","synthetic":true,"types":[]},{"text":"impl Send for VMStatusView","synthetic":true,"types":[]},{"text":"impl Send for TransactionDataView","synthetic":true,"types":[]},{"text":"impl Send for Amount","synthetic":true,"types":[]},{"text":"impl Send for Account","synthetic":true,"types":[]},{"text":"impl Send for AccountRole","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for EventData","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for Transaction","synthetic":true,"types":[]},{"text":"impl Send for MoveAbortExplaination","synthetic":true,"types":[]},{"text":"impl Send for VmStatus","synthetic":true,"types":[]},{"text":"impl Send for TransactionData","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for CurrencyInfo","synthetic":true,"types":[]},{"text":"impl Send for StateProof","synthetic":true,"types":[]},{"text":"impl Send for AccountStateWithProof","synthetic":true,"types":[]},{"text":"impl Send for AccountStateProof","synthetic":true,"types":[]}];
implementors["diem_key_manager"] = [{"text":"impl&lt;LI, S&gt; Send for KeyManager&lt;LI, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;LI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcDiemInterface","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LogSchema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LogEntry","synthetic":true,"types":[]},{"text":"impl Send for LogEvent","synthetic":true,"types":[]}];
implementors["diem_logger"] = [{"text":"impl Send for DiemLogger","synthetic":true,"types":[]},{"text":"impl Send for DiemLoggerBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !Send for KeyValue&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !Send for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl Send for SecurityEvent","synthetic":true,"types":[]},{"text":"impl Send for FileWriter","synthetic":true,"types":[]},{"text":"impl Send for JsonLogEntry","synthetic":true,"types":[]},{"text":"impl Send for Sampling","synthetic":true,"types":[]},{"text":"impl Send for SampleRate","synthetic":true,"types":[]}];
implementors["diem_management"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ConfigPath","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SecureBackend","synthetic":true,"types":[]},{"text":"impl Send for ValidatorBackend","synthetic":true,"types":[]},{"text":"impl Send for SharedBackend","synthetic":true,"types":[]},{"text":"impl Send for StorageWrapper","synthetic":true,"types":[]},{"text":"impl Send for ValidatorConfig","synthetic":true,"types":[]},{"text":"impl Send for InsertWaypoint","synthetic":true,"types":[]}];
implementors["diem_mempool"] = [{"text":"impl Send for CommitNotification","synthetic":true,"types":[]},{"text":"impl Send for CommitResponse","synthetic":true,"types":[]},{"text":"impl Send for CommittedTransaction","synthetic":true,"types":[]},{"text":"impl Send for TransactionExclusion","synthetic":true,"types":[]},{"text":"impl Send for ConsensusRequest","synthetic":true,"types":[]},{"text":"impl Send for ConsensusResponse","synthetic":true,"types":[]},{"text":"impl Send for MockSharedMempool","synthetic":true,"types":[]},{"text":"impl Send for MempoolNetworkSender","synthetic":true,"types":[]},{"text":"impl Send for MempoolSyncMsg","synthetic":true,"types":[]}];
implementors["diem_metrics"] = [{"text":"impl Send for DurationHistogram","synthetic":true,"types":[]},{"text":"impl Send for OpMetrics","synthetic":true,"types":[]}];
implementors["diem_network_address"] = [{"text":"impl Send for NetworkAddress","synthetic":true,"types":[]},{"text":"impl Send for DnsName","synthetic":true,"types":[]},{"text":"impl Send for EmptyError","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for IpFilter","synthetic":true,"types":[]},{"text":"impl Send for EncNetworkAddress","synthetic":true,"types":[]}];
implementors["diem_network_address_encryption"] = [{"text":"impl Send for Encryptor","synthetic":true,"types":[]},{"text":"impl Send for ValidatorKeys","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["diem_nibble"] = [{"text":"impl Send for Nibble","synthetic":true,"types":[]}];
implementors["diem_node"] = [{"text":"impl Send for DiemHandle","synthetic":true,"types":[]}];
implementors["diem_operational_tool"] = [{"text":"impl Send for TransactionContext","synthetic":true,"types":[]},{"text":"impl Send for Command","synthetic":true,"types":[]},{"text":"impl Send for CommandName","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ResultWrapper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcClientWrapper","synthetic":true,"types":[]},{"text":"impl Send for OperationalTool","synthetic":true,"types":[]}];
implementors["diem_proptest_helpers"] = [{"text":"impl&lt;Ix, T&gt; Send for GrowingSubset&lt;Ix, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ValueGenerator","synthetic":true,"types":[]},{"text":"impl Send for Index","synthetic":true,"types":[]}];
implementors["diem_rate_limiter"] = [{"text":"impl&lt;T&gt; Send for AsyncRateLimiter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Key&gt; Send for TokenBucketRateLimiter&lt;Key&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]}];
implementors["diem_retrier"] = [{"text":"impl Send for FixedDelay","synthetic":true,"types":[]},{"text":"impl Send for ExponentWithLimitDelay","synthetic":true,"types":[]}];
implementors["diem_secure_json_rpc"] = [{"text":"impl Send for JsonRpcClient","synthetic":true,"types":[]},{"text":"impl Send for TransactionView","synthetic":true,"types":[]},{"text":"impl Send for MoveAbortExplanationView","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for VMStatusView","synthetic":true,"types":[]}];
implementors["diem_secure_net"] = [{"text":"impl Send for NetworkClient","synthetic":true,"types":[]},{"text":"impl Send for NetworkServer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["diem_secure_push_metrics"] = [{"text":"impl Send for MetricsPusher","synthetic":true,"types":[]}];
implementors["diem_secure_storage"] = [{"text":"impl Send for PublicKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for GitHubStorage","synthetic":true,"types":[]},{"text":"impl Send for InMemoryStorage","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GetResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NamespacedStorage","synthetic":true,"types":[]},{"text":"impl Send for OnDiskStorage","synthetic":true,"types":[]},{"text":"impl Send for Permission","synthetic":true,"types":[]},{"text":"impl Send for Policy","synthetic":true,"types":[]},{"text":"impl Send for VaultStorage","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl Send for Storage","synthetic":true,"types":[]}];
implementors["diem_state_view"] = [{"text":"impl Send for StateViewId","synthetic":true,"types":[]}];
implementors["diem_swarm"] = [{"text":"impl Send for InteractiveClient","synthetic":true,"types":[]},{"text":"impl Send for Process","synthetic":true,"types":[]},{"text":"impl Send for DiemNode","synthetic":true,"types":[]},{"text":"impl Send for DiemSwarm","synthetic":true,"types":[]},{"text":"impl Send for HealthStatus","synthetic":true,"types":[]},{"text":"impl Send for DiemSwarmDir","synthetic":true,"types":[]},{"text":"impl Send for SwarmLaunchFailure","synthetic":true,"types":[]}];
implementors["diem_temppath"] = [{"text":"impl Send for TempPath","synthetic":true,"types":[]}];
implementors["diem_time_service"] = [{"text":"impl Send for TimeService","synthetic":true,"types":[]},{"text":"impl Send for Sleep","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl Send for MockTimeService","synthetic":true,"types":[]},{"text":"impl Send for MockSleep","synthetic":true,"types":[]},{"text":"impl Send for RealTimeService","synthetic":true,"types":[]},{"text":"impl Send for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["diem_trace"] = [{"text":"impl Send for DiemTraceClient","synthetic":true,"types":[]},{"text":"impl Send for TraceBlockGuard","synthetic":true,"types":[]}];
implementors["diem_transaction_replay"] = [{"text":"impl !Send for DiemDebugger","synthetic":true,"types":[]}];
implementors["diem_types"] = [{"text":"impl Send for AccessPath","synthetic":true,"types":[]},{"text":"impl Send for Path","synthetic":true,"types":[]},{"text":"impl Send for AdminTransactionEvent","synthetic":true,"types":[]},{"text":"impl Send for BaseUrlRotationEvent","synthetic":true,"types":[]},{"text":"impl Send for BurnEvent","synthetic":true,"types":[]},{"text":"impl Send for CancelBurnEvent","synthetic":true,"types":[]},{"text":"impl Send for ComplianceKeyRotationEvent","synthetic":true,"types":[]},{"text":"impl Send for CreateAccountEvent","synthetic":true,"types":[]},{"text":"impl Send for ToXDXExchangeRateUpdateEvent","synthetic":true,"types":[]},{"text":"impl Send for MintEvent","synthetic":true,"types":[]},{"text":"impl Send for NewBlockEvent","synthetic":true,"types":[]},{"text":"impl Send for NewEpochEvent","synthetic":true,"types":[]},{"text":"impl Send for PreburnEvent","synthetic":true,"types":[]},{"text":"impl Send for ReceivedMintEvent","synthetic":true,"types":[]},{"text":"impl Send for ReceivedPaymentEvent","synthetic":true,"types":[]},{"text":"impl Send for SentPaymentEvent","synthetic":true,"types":[]},{"text":"impl Send for AccountResource","synthetic":true,"types":[]},{"text":"impl Send for BalanceResource","synthetic":true,"types":[]},{"text":"impl Send for ChainIdResource","synthetic":true,"types":[]},{"text":"impl Send for CurrencyInfoResource","synthetic":true,"types":[]},{"text":"impl Send for DesignatedDealer","synthetic":true,"types":[]},{"text":"impl Send for Credential","synthetic":true,"types":[]},{"text":"impl Send for Limit","synthetic":true,"types":[]},{"text":"impl Send for FreezingBit","synthetic":true,"types":[]},{"text":"impl Send for KeyRotationCapabilityResource","synthetic":true,"types":[]},{"text":"impl Send for PreburnResource","synthetic":true,"types":[]},{"text":"impl Send for AccountRole","synthetic":true,"types":[]},{"text":"impl Send for RoleId","synthetic":true,"types":[]},{"text":"impl Send for ParentVASP","synthetic":true,"types":[]},{"text":"impl Send for ChildVASP","synthetic":true,"types":[]},{"text":"impl Send for WithdrawCapabilityResource","synthetic":true,"types":[]},{"text":"impl Send for AccountState","synthetic":true,"types":[]},{"text":"impl Send for AccountStateBlob","synthetic":true,"types":[]},{"text":"impl Send for AccountStateBlobHasher","synthetic":true,"types":[]},{"text":"impl Send for AccountStateWithProof","synthetic":true,"types":[]},{"text":"impl Send for BlockInfo","synthetic":true,"types":[]},{"text":"impl Send for BlockMetadata","synthetic":true,"types":[]},{"text":"impl Send for DiemBlockResource","synthetic":true,"types":[]},{"text":"impl Send for NewBlockEvent","synthetic":true,"types":[]},{"text":"impl Send for ChainId","synthetic":true,"types":[]},{"text":"impl Send for NamedChain","synthetic":true,"types":[]},{"text":"impl Send for ContractEventHasher","synthetic":true,"types":[]},{"text":"impl Send for ContractEventV0","synthetic":true,"types":[]},{"text":"impl Send for ContractEventV0Hasher","synthetic":true,"types":[]},{"text":"impl Send for EventWithProof","synthetic":true,"types":[]},{"text":"impl Send for ContractEvent","synthetic":true,"types":[]},{"text":"impl Send for DiemTimestampResource","synthetic":true,"types":[]},{"text":"impl Send for DiemTimestamp","synthetic":true,"types":[]},{"text":"impl Send for EpochChangeProof","synthetic":true,"types":[]},{"text":"impl Send for EpochState","synthetic":true,"types":[]},{"text":"impl Send for EventKey","synthetic":true,"types":[]},{"text":"impl Send for EventHandle","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfo","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfoHasher","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfoWithV0","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfoWithSignatures","synthetic":true,"types":[]},{"text":"impl Send for MempoolStatus","synthetic":true,"types":[]},{"text":"impl Send for MempoolStatusCode","synthetic":true,"types":[]},{"text":"impl Send for DiemVersion","synthetic":true,"types":[]},{"text":"impl Send for RegisteredCurrencies","synthetic":true,"types":[]},{"text":"impl Send for ValidatorSet","synthetic":true,"types":[]},{"text":"impl Send for VMConfig","synthetic":true,"types":[]},{"text":"impl Send for VMPublishingOption","synthetic":true,"types":[]},{"text":"impl Send for ConfigID","synthetic":true,"types":[]},{"text":"impl Send for OnChainConfigPayload","synthetic":true,"types":[]},{"text":"impl Send for ConfigurationResource","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for MerkleTreeInternalNode&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SparseMerkleLeafNode","synthetic":true,"types":[]},{"text":"impl Send for SparseMerkleLeafNodeHasher","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for InMemoryAccumulator&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for AccumulatorProof&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for SparseMerkleProof&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AccumulatorConsistencyProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for AccumulatorRangeProof&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SparseMerkleRangeProof","synthetic":true,"types":[]},{"text":"impl Send for TransactionInfoWithProof","synthetic":true,"types":[]},{"text":"impl Send for AccountStateProof","synthetic":true,"types":[]},{"text":"impl Send for EventProof","synthetic":true,"types":[]},{"text":"impl Send for TransactionListProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for AccumulatorExtensionProof&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for AncestorSiblingIterator","synthetic":true,"types":[]},{"text":"impl Send for AncestorIterator","synthetic":true,"types":[]},{"text":"impl Send for FrozenSubTreeIterator","synthetic":true,"types":[]},{"text":"impl Send for FrozenSubtreeSiblingIterator","synthetic":true,"types":[]},{"text":"impl Send for NodeDirection","synthetic":true,"types":[]},{"text":"impl Send for AccountInfoUniverse","synthetic":true,"types":[]},{"text":"impl Send for RawTransactionGen","synthetic":true,"types":[]},{"text":"impl Send for SignatureCheckedTransactionGen","synthetic":true,"types":[]},{"text":"impl Send for ContractEventGen","synthetic":true,"types":[]},{"text":"impl Send for AccountResourceGen","synthetic":true,"types":[]},{"text":"impl Send for BalanceResourceGen","synthetic":true,"types":[]},{"text":"impl Send for AccountStateBlobGen","synthetic":true,"types":[]},{"text":"impl Send for TransactionToCommitGen","synthetic":true,"types":[]},{"text":"impl Send for BlockInfoGen","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfoGen","synthetic":true,"types":[]},{"text":"impl Send for LedgerInfoWithSignaturesGen","synthetic":true,"types":[]},{"text":"impl Send for ChangeSet","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for ArgumentABI","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ScriptABI","synthetic":true,"types":[]},{"text":"impl Send for TypeArgumentABI","synthetic":true,"types":[]},{"text":"impl Send for RawTransaction","synthetic":true,"types":[]},{"text":"impl Send for RawTransactionHasher","synthetic":true,"types":[]},{"text":"impl Send for SignedTransaction","synthetic":true,"types":[]},{"text":"impl Send for SignatureCheckedTransaction","synthetic":true,"types":[]},{"text":"impl Send for TransactionWithProof","synthetic":true,"types":[]},{"text":"impl Send for VMValidatorResult","synthetic":true,"types":[]},{"text":"impl Send for TransactionOutput","synthetic":true,"types":[]},{"text":"impl Send for TransactionInfo","synthetic":true,"types":[]},{"text":"impl Send for TransactionInfoHasher","synthetic":true,"types":[]},{"text":"impl Send for TransactionToCommit","synthetic":true,"types":[]},{"text":"impl Send for TransactionListWithProof","synthetic":true,"types":[]},{"text":"impl Send for TransactionHasher","synthetic":true,"types":[]},{"text":"impl Send for TransactionPayload","synthetic":true,"types":[]},{"text":"impl Send for WriteSetPayload","synthetic":true,"types":[]},{"text":"impl Send for TransactionStatus","synthetic":true,"types":[]},{"text":"impl Send for GovernanceRole","synthetic":true,"types":[]},{"text":"impl Send for Transaction","synthetic":true,"types":[]},{"text":"impl Send for AuthenticationKey","synthetic":true,"types":[]},{"text":"impl Send for AuthenticationKeyHasher","synthetic":true,"types":[]},{"text":"impl Send for AuthenticationKeyPreimage","synthetic":true,"types":[]},{"text":"impl Send for Scheme","synthetic":true,"types":[]},{"text":"impl Send for TransactionAuthenticator","synthetic":true,"types":[]},{"text":"impl Send for GeneralMetadataV0","synthetic":true,"types":[]},{"text":"impl Send for TravelRuleMetadataV0","synthetic":true,"types":[]},{"text":"impl Send for UnstructuredBytesMetadata","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for GeneralMetadata","synthetic":true,"types":[]},{"text":"impl Send for TravelRuleMetadata","synthetic":true,"types":[]},{"text":"impl Send for TrustedState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrustedStateChange&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ValidatorConfigResource","synthetic":true,"types":[]},{"text":"impl Send for ValidatorOperatorConfigResource","synthetic":true,"types":[]},{"text":"impl Send for ValidatorConfig","synthetic":true,"types":[]},{"text":"impl Send for ValidatorInfo","synthetic":true,"types":[]},{"text":"impl Send for ValidatorSigner","synthetic":true,"types":[]},{"text":"impl Send for ValidatorConsensusInfo","synthetic":true,"types":[]},{"text":"impl Send for ValidatorVerifier","synthetic":true,"types":[]},{"text":"impl Send for VerifyError","synthetic":true,"types":[]},{"text":"impl Send for Waypoint","synthetic":true,"types":[]},{"text":"impl Send for Ledger2WaypointConverterHasher","synthetic":true,"types":[]},{"text":"impl Send for WriteSet","synthetic":true,"types":[]},{"text":"impl Send for WriteSetMut","synthetic":true,"types":[]},{"text":"impl Send for WriteOp","synthetic":true,"types":[]}];
implementors["diem_validator_interface"] = [{"text":"impl Send for DBDebuggerInterface","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcDebuggerInterface","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DebuggerStateView&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["diem_vault_client"] = [{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for KeyBackup","synthetic":true,"types":[]},{"text":"impl Send for KeyBackupPolicy","synthetic":true,"types":[]},{"text":"impl Send for KeyBackupInfo","synthetic":true,"types":[]},{"text":"impl Send for BackupInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadKey","synthetic":true,"types":[]},{"text":"impl Send for Policy","synthetic":true,"types":[]},{"text":"impl Send for PolicyPaths","synthetic":true,"types":[]},{"text":"impl Send for PathPolicy","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for VaultRunner","synthetic":true,"types":[]}];
implementors["diem_vm"] = [{"text":"impl&lt;'a&gt; Send for StateViewCache&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for RemoteStorage&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TransactionMetadata","synthetic":true,"types":[]},{"text":"impl Send for DiemVM","synthetic":true,"types":[]},{"text":"impl Send for DiemVMValidator","synthetic":true,"types":[]},{"text":"impl Send for AdapterLogSchema","synthetic":true,"types":[]},{"text":"impl Send for LogEntry","synthetic":true,"types":[]}];
implementors["diem_wallet"] = [{"text":"impl Send for Mnemonic","synthetic":true,"types":[]},{"text":"impl Send for WalletLibrary","synthetic":true,"types":[]}];
implementors["diem_writeset_generator"] = [{"text":"impl&lt;'r, 'l, R&gt; !Send for GenesisSession&lt;'r, 'l, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReleaseArtifact","synthetic":true,"types":[]}];
implementors["diemdb"] = [{"text":"impl Send for DiemDB","synthetic":true,"types":[]},{"text":"impl Send for Diemsum","synthetic":true,"types":[]},{"text":"impl Send for BackupHandler","synthetic":true,"types":[]},{"text":"impl Send for DbState","synthetic":true,"types":[]},{"text":"impl Send for RestoreHandler","synthetic":true,"types":[]},{"text":"impl Send for DiemDbError","synthetic":true,"types":[]}];
implementors["disassembler"] = [{"text":"impl Send for DisassemblerOptions","synthetic":true,"types":[]},{"text":"impl&lt;Location&gt; Send for Disassembler&lt;Location&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Location: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["docgen"] = [{"text":"impl Send for DocgenOptions","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for Docgen&lt;'env&gt;","synthetic":true,"types":[]}];
implementors["errmapgen"] = [{"text":"impl Send for ErrmapOptions","synthetic":true,"types":[]},{"text":"impl Send for ErrorDescription","synthetic":true,"types":[]},{"text":"impl Send for ErrorContext","synthetic":true,"types":[]},{"text":"impl Send for ErrorMapping","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for ErrmapGen&lt;'env&gt;","synthetic":true,"types":[]}];
implementors["execution_correctness"] = [{"text":"impl Send for ExecutionCorrectnessManager","synthetic":true,"types":[]},{"text":"impl Send for Process","synthetic":true,"types":[]}];
implementors["executor"] = [{"text":"impl&lt;V&gt; Send for Executor&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FakeVM","synthetic":true,"types":[]},{"text":"impl Send for FakeDb","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for GenesisCommitter&lt;V&gt;","synthetic":true,"types":[]}];
implementors["executor_types"] = [{"text":"impl Send for StateComputeResult","synthetic":true,"types":[]},{"text":"impl Send for ExecutedTrees","synthetic":true,"types":[]},{"text":"impl Send for ProofReader","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["functional_tests"] = [{"text":"impl Send for Directive","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]},{"text":"impl Send for MatchResult","synthetic":true,"types":[]},{"text":"impl Send for MatchError","synthetic":true,"types":[]},{"text":"impl Send for MatchStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LineSp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ScriptOrModule","synthetic":true,"types":[]},{"text":"impl Send for Proposer","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Balance","synthetic":true,"types":[]},{"text":"impl Send for AccountDefinition","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Argument","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EvaluationLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Command&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Stage","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for OutputType","synthetic":true,"types":[]},{"text":"impl Send for EvaluationOutput","synthetic":true,"types":[]},{"text":"impl Send for RawTransactionInput","synthetic":true,"types":[]},{"text":"impl Send for RawCommand","synthetic":true,"types":[]}];
implementors["generate_format"] = [{"text":"impl Send for Corpus","synthetic":true,"types":[]}];
implementors["invalid_mutations"] = [{"text":"impl&lt;'a&gt; Send for ApplyCodeUnitBoundsContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CodeUnitBoundsMutation","synthetic":true,"types":[]},{"text":"impl Send for OutOfBoundsMutation","synthetic":true,"types":[]},{"text":"impl Send for ApplyOutOfBoundsContext","synthetic":true,"types":[]},{"text":"impl Send for PointerKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SignatureRefMutation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FieldRefMutation&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ir_to_bytecode"] = [{"text":"impl Send for InternalCompilerError","synthetic":true,"types":[]}];
implementors["ir_to_bytecode_syntax"] = [{"text":"impl&lt;L, E&gt; Send for ParseError&lt;L, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["language_benchmarks"] = [{"text":"impl&lt;S&gt; Send for TransactionBencher&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["language_e2e_tests"] = [{"text":"impl Send for Account","synthetic":true,"types":[]},{"text":"impl Send for TransactionBuilder","synthetic":true,"types":[]},{"text":"impl Send for Balance","synthetic":true,"types":[]},{"text":"impl Send for AccountRole","synthetic":true,"types":[]},{"text":"impl Send for EventHandleGenerator","synthetic":true,"types":[]},{"text":"impl Send for AccountData","synthetic":true,"types":[]},{"text":"impl Send for WithdrawCapability","synthetic":true,"types":[]},{"text":"impl Send for KeyRotationCapability","synthetic":true,"types":[]},{"text":"impl Send for FreezingBit","synthetic":true,"types":[]},{"text":"impl Send for AccountRoleSpecifier","synthetic":true,"types":[]},{"text":"impl Send for SequenceNumberMismatchGen","synthetic":true,"types":[]},{"text":"impl Send for InsufficientBalanceGen","synthetic":true,"types":[]},{"text":"impl Send for InvalidAuthkeyGen","synthetic":true,"types":[]},{"text":"impl Send for CreateAccountGen","synthetic":true,"types":[]},{"text":"impl Send for CreateExistingAccountGen","synthetic":true,"types":[]},{"text":"impl Send for P2PTransferGen","synthetic":true,"types":[]},{"text":"impl Send for RotateKeyGen","synthetic":true,"types":[]},{"text":"impl Send for AccountUniverseGen","synthetic":true,"types":[]},{"text":"impl Send for AccountUniverse","synthetic":true,"types":[]},{"text":"impl Send for AccountPairGen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AccountPair&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AccountCurrent","synthetic":true,"types":[]},{"text":"impl Send for AccountPickStyle","synthetic":true,"types":[]},{"text":"impl Send for FakeDataStore","synthetic":true,"types":[]},{"text":"impl Send for BasicStrategy","synthetic":true,"types":[]},{"text":"impl !Send for BasicExecutor","synthetic":true,"types":[]},{"text":"impl Send for PartitionedGuidedStrategy","synthetic":true,"types":[]},{"text":"impl Send for UnPartitionedGuidedStrategy","synthetic":true,"types":[]},{"text":"impl&lt;Strategy&gt; !Send for GuidedExecutor&lt;Strategy&gt;","synthetic":true,"types":[]},{"text":"impl Send for AnnotatedTransaction","synthetic":true,"types":[]},{"text":"impl&lt;TxnType, E&gt; !Send for MultiExecutor&lt;TxnType, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MultiResult&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RandomizedStrategy","synthetic":true,"types":[]},{"text":"impl !Send for RandomExecutor","synthetic":true,"types":[]},{"text":"impl !Send for FakeExecutor","synthetic":true,"types":[]},{"text":"impl Send for KeyGen","synthetic":true,"types":[]}];
implementors["memsocket"] = [{"text":"impl Send for MemoryListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MemorySocket","synthetic":true,"types":[]}];
implementors["module_generation"] = [{"text":"impl&lt;'a&gt; Send for ModuleGenerator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ModuleGeneratorOptions","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]}];
implementors["move_cli"] = [{"text":"impl Send for OnDiskStateView","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]}];
implementors["move_core_types"] = [{"text":"impl Send for AccountAddress","synthetic":true,"types":[]},{"text":"impl Send for AccountAddressHasher","synthetic":true,"types":[]},{"text":"impl&lt;GasCarrier&gt; Send for AbstractMemorySize&lt;GasCarrier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GasCarrier: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;GasCarrier&gt; Send for GasUnits&lt;GasCarrier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GasCarrier: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;GasCarrier&gt; Send for GasPrice&lt;GasCarrier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GasCarrier: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GasConstants","synthetic":true,"types":[]},{"text":"impl Send for CostTable","synthetic":true,"types":[]},{"text":"impl Send for GasCost","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for IdentStr","synthetic":true,"types":[]},{"text":"impl Send for StructTag","synthetic":true,"types":[]},{"text":"impl Send for StructTagHasher","synthetic":true,"types":[]},{"text":"impl Send for ResourceKey","synthetic":true,"types":[]},{"text":"impl Send for ModuleId","synthetic":true,"types":[]},{"text":"impl Send for ModuleIdHasher","synthetic":true,"types":[]},{"text":"impl Send for TypeTag","synthetic":true,"types":[]},{"text":"impl Send for TransactionArgument","synthetic":true,"types":[]},{"text":"impl Send for MoveStruct","synthetic":true,"types":[]},{"text":"impl Send for MoveStructLayout","synthetic":true,"types":[]},{"text":"impl Send for MoveValue","synthetic":true,"types":[]},{"text":"impl Send for MoveTypeLayout","synthetic":true,"types":[]},{"text":"impl Send for MoveKind","synthetic":true,"types":[]},{"text":"impl Send for MoveKindInfo","synthetic":true,"types":[]},{"text":"impl Send for VMStatus","synthetic":true,"types":[]},{"text":"impl Send for KeptVMStatus","synthetic":true,"types":[]},{"text":"impl Send for AbortLocation","synthetic":true,"types":[]},{"text":"impl Send for StatusType","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]}];
implementors["move_coverage"] = [{"text":"impl Send for CoverageMap","synthetic":true,"types":[]},{"text":"impl Send for ModuleCoverageMap","synthetic":true,"types":[]},{"text":"impl Send for ExecCoverageMap","synthetic":true,"types":[]},{"text":"impl Send for ExecCoverageMapWithModules","synthetic":true,"types":[]},{"text":"impl Send for TraceEntry","synthetic":true,"types":[]},{"text":"impl Send for TraceMap","synthetic":true,"types":[]},{"text":"impl Send for FunctionSourceCoverage","synthetic":true,"types":[]},{"text":"impl Send for SourceCoverageBuilder","synthetic":true,"types":[]},{"text":"impl Send for SourceCoverage","synthetic":true,"types":[]},{"text":"impl Send for AbstractSegment","synthetic":true,"types":[]},{"text":"impl Send for StringSegment","synthetic":true,"types":[]},{"text":"impl Send for ModuleSummary","synthetic":true,"types":[]},{"text":"impl Send for FunctionSummary","synthetic":true,"types":[]},{"text":"impl Send for FunctionInfo","synthetic":true,"types":[]}];
implementors["move_ir_types"] = [{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleName","synthetic":true,"types":[]},{"text":"impl Send for QualifiedModuleIdent","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for ModuleDependency","synthetic":true,"types":[]},{"text":"impl Send for ImportDefinition","synthetic":true,"types":[]},{"text":"impl Send for Var_","synthetic":true,"types":[]},{"text":"impl Send for TypeVar_","synthetic":true,"types":[]},{"text":"impl Send for QualifiedStructIdent","synthetic":true,"types":[]},{"text":"impl Send for Field_","synthetic":true,"types":[]},{"text":"impl Send for StructName","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition_","synthetic":true,"types":[]},{"text":"impl Send for StructDependency","synthetic":true,"types":[]},{"text":"impl Send for ConstantName","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for FunctionName","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for FunctionDependency","synthetic":true,"types":[]},{"text":"impl Send for Function_","synthetic":true,"types":[]},{"text":"impl Send for IfElse","synthetic":true,"types":[]},{"text":"impl Send for While","synthetic":true,"types":[]},{"text":"impl Send for Loop","synthetic":true,"types":[]},{"text":"impl Send for Block_","synthetic":true,"types":[]},{"text":"impl Send for BlockLabel","synthetic":true,"types":[]},{"text":"impl Send for NopLabel","synthetic":true,"types":[]},{"text":"impl Send for ScriptOrModule","synthetic":true,"types":[]},{"text":"impl Send for ModuleIdent","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for StructDefinitionFields","synthetic":true,"types":[]},{"text":"impl Send for FunctionVisibility","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody","synthetic":true,"types":[]},{"text":"impl Send for Builtin","synthetic":true,"types":[]},{"text":"impl Send for FunctionCall_","synthetic":true,"types":[]},{"text":"impl Send for LValue_","synthetic":true,"types":[]},{"text":"impl Send for Cmd_","synthetic":true,"types":[]},{"text":"impl Send for Statement","synthetic":true,"types":[]},{"text":"impl Send for CopyableVal_","synthetic":true,"types":[]},{"text":"impl Send for UnaryOp","synthetic":true,"types":[]},{"text":"impl Send for BinOp","synthetic":true,"types":[]},{"text":"impl Send for Exp_","synthetic":true,"types":[]},{"text":"impl Send for Bytecode_","synthetic":true,"types":[]},{"text":"impl Send for Loc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Invariant_","synthetic":true,"types":[]},{"text":"impl Send for SyntheticDefinition_","synthetic":true,"types":[]},{"text":"impl Send for FieldOrIndex","synthetic":true,"types":[]},{"text":"impl Send for StorageLocation","synthetic":true,"types":[]},{"text":"impl Send for SpecExp","synthetic":true,"types":[]},{"text":"impl Send for Condition_","synthetic":true,"types":[]}];
implementors["move_lang"] = [{"text":"impl Send for Pass","synthetic":true,"types":[]},{"text":"impl Send for PassResult","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for VarInfo","synthetic":true,"types":[]},{"text":"impl Send for SpecInfo","synthetic":true,"types":[]},{"text":"impl Send for FunctionInfo","synthetic":true,"types":[]},{"text":"impl Send for CompiledUnit","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for SpecId","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for SpecBlock_","synthetic":true,"types":[]},{"text":"impl Send for PragmaProperty_","synthetic":true,"types":[]},{"text":"impl Send for StructFields","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockMember_","synthetic":true,"types":[]},{"text":"impl Send for PragmaValue","synthetic":true,"types":[]},{"text":"impl Send for ModuleAccess_","synthetic":true,"types":[]},{"text":"impl Send for Type_","synthetic":true,"types":[]},{"text":"impl Send for LValue_","synthetic":true,"types":[]},{"text":"impl Send for ExpDotted_","synthetic":true,"types":[]},{"text":"impl Send for Value_","synthetic":true,"types":[]},{"text":"impl Send for Exp_","synthetic":true,"types":[]},{"text":"impl Send for SequenceItem_","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for Label","synthetic":true,"types":[]},{"text":"impl Send for ModuleCall","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for StructFields","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for TypeName_","synthetic":true,"types":[]},{"text":"impl Send for BaseType_","synthetic":true,"types":[]},{"text":"impl Send for SingleType_","synthetic":true,"types":[]},{"text":"impl Send for Type_","synthetic":true,"types":[]},{"text":"impl Send for Statement_","synthetic":true,"types":[]},{"text":"impl Send for Command_","synthetic":true,"types":[]},{"text":"impl Send for LValue_","synthetic":true,"types":[]},{"text":"impl Send for BuiltinFunction_","synthetic":true,"types":[]},{"text":"impl Send for UnannotatedExp_","synthetic":true,"types":[]},{"text":"impl Send for ExpListItem","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for TParamID","synthetic":true,"types":[]},{"text":"impl Send for TParam","synthetic":true,"types":[]},{"text":"impl Send for TVar","synthetic":true,"types":[]},{"text":"impl Send for StructFields","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for BuiltinTypeName_","synthetic":true,"types":[]},{"text":"impl Send for TypeName_","synthetic":true,"types":[]},{"text":"impl Send for Type_","synthetic":true,"types":[]},{"text":"impl Send for LValue_","synthetic":true,"types":[]},{"text":"impl Send for ExpDotted_","synthetic":true,"types":[]},{"text":"impl Send for BuiltinFunction_","synthetic":true,"types":[]},{"text":"impl Send for Exp_","synthetic":true,"types":[]},{"text":"impl Send for SequenceItem_","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleName","synthetic":true,"types":[]},{"text":"impl Send for ModuleIdent_","synthetic":true,"types":[]},{"text":"impl Send for ModuleIdent","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for StructName","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition","synthetic":true,"types":[]},{"text":"impl Send for FunctionName","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for ConstantName","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for SpecBlock_","synthetic":true,"types":[]},{"text":"impl Send for PragmaProperty_","synthetic":true,"types":[]},{"text":"impl Send for SpecApplyPattern_","synthetic":true,"types":[]},{"text":"impl Send for Var","synthetic":true,"types":[]},{"text":"impl Send for Definition","synthetic":true,"types":[]},{"text":"impl Send for Use","synthetic":true,"types":[]},{"text":"impl Send for ModuleMember","synthetic":true,"types":[]},{"text":"impl Send for StructFields","synthetic":true,"types":[]},{"text":"impl Send for FunctionVisibility","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockTarget_","synthetic":true,"types":[]},{"text":"impl Send for PragmaValue","synthetic":true,"types":[]},{"text":"impl Send for SpecApplyFragment_","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockMember_","synthetic":true,"types":[]},{"text":"impl Send for SpecConditionKind","synthetic":true,"types":[]},{"text":"impl Send for InvariantKind","synthetic":true,"types":[]},{"text":"impl Send for ModuleAccess_","synthetic":true,"types":[]},{"text":"impl Send for Kind_","synthetic":true,"types":[]},{"text":"impl Send for Type_","synthetic":true,"types":[]},{"text":"impl Send for Bind_","synthetic":true,"types":[]},{"text":"impl Send for Value_","synthetic":true,"types":[]},{"text":"impl Send for UnaryOp_","synthetic":true,"types":[]},{"text":"impl Send for BinOp_","synthetic":true,"types":[]},{"text":"impl Send for QuantKind_","synthetic":true,"types":[]},{"text":"impl Send for Exp_","synthetic":true,"types":[]},{"text":"impl Send for SequenceItem_","synthetic":true,"types":[]},{"text":"impl Send for Address","synthetic":true,"types":[]},{"text":"impl Send for Counter","synthetic":true,"types":[]},{"text":"impl Send for AstWriter","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for RememberingUniqueMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for UniqueMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Key: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as TName&gt;::Loc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for ModuleCall","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for FunctionBody_","synthetic":true,"types":[]},{"text":"impl Send for LValue_","synthetic":true,"types":[]},{"text":"impl Send for BuiltinFunction_","synthetic":true,"types":[]},{"text":"impl Send for UnannotatedExp_","synthetic":true,"types":[]},{"text":"impl Send for SequenceItem_","synthetic":true,"types":[]},{"text":"impl Send for ExpListItem","synthetic":true,"types":[]}];
implementors["move_lang_test_utils"] = [{"text":"impl Send for StringError","synthetic":true,"types":[]}];
implementors["move_model"] = [{"text":"impl Send for SpecVarDecl","synthetic":true,"types":[]},{"text":"impl Send for SpecFunDecl","synthetic":true,"types":[]},{"text":"impl Send for Condition","synthetic":true,"types":[]},{"text":"impl Send for Spec","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockInfo","synthetic":true,"types":[]},{"text":"impl Send for GlobalInvariant","synthetic":true,"types":[]},{"text":"impl Send for LocalVarDecl","synthetic":true,"types":[]},{"text":"impl Send for ModuleName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ModuleNameDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for QualifiedSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for QualifiedSymbolDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ExpDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for OperationDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ConditionKind","synthetic":true,"types":[]},{"text":"impl Send for QuantKind","synthetic":true,"types":[]},{"text":"impl Send for PropertyValue","synthetic":true,"types":[]},{"text":"impl Send for SpecBlockTarget","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Operation","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for CodeWriter","synthetic":true,"types":[]},{"text":"impl Send for CodeWriterLabel","synthetic":true,"types":[]},{"text":"impl&lt;'env, 'rewriter&gt; !Send for ExpRewriter&lt;'env, 'rewriter&gt;","synthetic":true,"types":[]},{"text":"impl Send for Loc","synthetic":true,"types":[]},{"text":"impl Send for ModuleId","synthetic":true,"types":[]},{"text":"impl Send for NamedConstantId","synthetic":true,"types":[]},{"text":"impl Send for StructId","synthetic":true,"types":[]},{"text":"impl Send for FieldId","synthetic":true,"types":[]},{"text":"impl Send for FunId","synthetic":true,"types":[]},{"text":"impl Send for SchemaId","synthetic":true,"types":[]},{"text":"impl Send for SpecFunId","synthetic":true,"types":[]},{"text":"impl Send for SpecVarId","synthetic":true,"types":[]},{"text":"impl Send for NodeId","synthetic":true,"types":[]},{"text":"impl Send for GlobalId","synthetic":true,"types":[]},{"text":"impl&lt;Id&gt; Send for QualifiedId&lt;Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for GlobalEnv","synthetic":true,"types":[]},{"text":"impl Send for ConditionInfo","synthetic":true,"types":[]},{"text":"impl Send for ModuleData","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for ModuleEnv&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for StructData","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for StructEnv&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for FieldData","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for FieldEnv&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for NamedConstantData","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for NamedConstantEnv&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for TypeParameter","synthetic":true,"types":[]},{"text":"impl Send for Parameter","synthetic":true,"types":[]},{"text":"impl Send for FunctionData","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for FunctionEnv&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !Send for LocDisplay&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl Send for VerificationScope","synthetic":true,"types":[]},{"text":"impl Send for ConditionTag","synthetic":true,"types":[]},{"text":"impl Send for TypeConstraint","synthetic":true,"types":[]},{"text":"impl Send for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SymbolDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for SymbolPool","synthetic":true,"types":[]},{"text":"impl Send for Substitution","synthetic":true,"types":[]},{"text":"impl Send for TypeError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for PrimitiveType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeDisplayContext&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["move_prover"] = [{"text":"impl Send for Options","synthetic":true,"types":[]}];
implementors["move_vm_runtime"] = [{"text":"impl !Send for AccountDataCache","synthetic":true,"types":[]},{"text":"impl !Send for TransactionEffects","synthetic":true,"types":[]},{"text":"impl Send for NoContextLog","synthetic":true,"types":[]},{"text":"impl Send for MoveVM","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'l, R&gt; !Send for Session&lt;'r, 'l, R&gt;","synthetic":true,"types":[]}];
implementors["move_vm_test_utils"] = [{"text":"impl Send for AccountChangeSet","synthetic":true,"types":[]},{"text":"impl Send for ChangeSet","synthetic":true,"types":[]},{"text":"impl Send for BlankStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for DeltaStorage&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InMemoryStorage","synthetic":true,"types":[]}];
implementors["move_vm_types"] = [{"text":"impl&lt;'a&gt; Send for CostStrategy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NativeCostIndex","synthetic":true,"types":[]},{"text":"impl Send for StructType","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for NativeResult","synthetic":true,"types":[]},{"text":"impl !Send for SignerRef","synthetic":true,"types":[]},{"text":"impl !Send for VectorRef","synthetic":true,"types":[]},{"text":"impl !Send for Vector","synthetic":true,"types":[]},{"text":"impl !Send for StructRef","synthetic":true,"types":[]},{"text":"impl !Send for Reference","synthetic":true,"types":[]},{"text":"impl !Send for Value","synthetic":true,"types":[]},{"text":"impl !Send for Locals","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for GlobalValue","synthetic":true,"types":[]},{"text":"impl Send for IntegerValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GlobalValueEffect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["netcore"] = [{"text":"impl Send for ConnectionOrigin","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for AndThen&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for AndThenStream&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThenFuture&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Send for BoxedTransport&lt;O, E&gt;","synthetic":true,"types":[]},{"text":"impl Send for MemoryTransport","synthetic":true,"types":[]},{"text":"impl Send for Listener","synthetic":true,"types":[]},{"text":"impl Send for TcpTransport","synthetic":true,"types":[]},{"text":"impl Send for TcpListenerStream","synthetic":true,"types":[]},{"text":"impl Send for TcpOutbound","synthetic":true,"types":[]},{"text":"impl Send for TcpSocket","synthetic":true,"types":[]}];
implementors["network"] = [{"text":"impl&lt;TTicker, TBackoff&gt; Send for ConnectivityManager&lt;TTicker, TBackoff&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBackoff: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTicker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DiscoverySource","synthetic":true,"types":[]},{"text":"impl Send for ConnectivityRequest","synthetic":true,"types":[]},{"text":"impl Send for ConnectivityManagerBuilder","synthetic":true,"types":[]},{"text":"impl Send for NetworkError","synthetic":true,"types":[]},{"text":"impl Send for NetworkErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NetworkSchema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NoiseHandshakeError","synthetic":true,"types":[]},{"text":"impl Send for AntiReplayTimestamps","synthetic":true,"types":[]},{"text":"impl Send for NoiseUpgrader","synthetic":true,"types":[]},{"text":"impl Send for HandshakeAuthMode","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; Send for NoiseStream&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; Send for Peer&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PeerRequest","synthetic":true,"types":[]},{"text":"impl Send for PeerNotification","synthetic":true,"types":[]},{"text":"impl Send for DisconnectReason","synthetic":true,"types":[]},{"text":"impl Send for PeerManagerRequestSender","synthetic":true,"types":[]},{"text":"impl Send for ConnectionRequestSender","synthetic":true,"types":[]},{"text":"impl&lt;TTransport, TSocket&gt; Send for PeerManager&lt;TTransport, TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransport: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TTransport as Transport&gt;::Listener: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PeerManagerError","synthetic":true,"types":[]},{"text":"impl Send for PeerManagerRequest","synthetic":true,"types":[]},{"text":"impl Send for PeerManagerNotification","synthetic":true,"types":[]},{"text":"impl Send for ConnectionRequest","synthetic":true,"types":[]},{"text":"impl Send for ConnectionNotification","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; Send for TransportNotification&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PeerManagerBuilder","synthetic":true,"types":[]},{"text":"impl Send for AuthenticationMode","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl&lt;TMessage&gt; Send for NetworkEvents&lt;TMessage&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMessage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TMessage&gt; Send for NetworkSender&lt;TMessage&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMessage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TMessage&gt; Send for Event&lt;TMessage&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TMessage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InboundRpcRequest","synthetic":true,"types":[]},{"text":"impl Send for OutboundRpcRequest","synthetic":true,"types":[]},{"text":"impl Send for InboundRpcs","synthetic":true,"types":[]},{"text":"impl Send for OutboundRpcs","synthetic":true,"types":[]},{"text":"impl Send for RpcError","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckerNetworkSender","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for Pong","synthetic":true,"types":[]},{"text":"impl&lt;TTicker&gt; Send for HealthChecker&lt;TTicker&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTicker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckerMsg","synthetic":true,"types":[]},{"text":"impl Send for HealthCheckerBuilder","synthetic":true,"types":[]},{"text":"impl Send for SupportedProtocols","synthetic":true,"types":[]},{"text":"impl Send for HandshakeMsg","synthetic":true,"types":[]},{"text":"impl Send for ProtocolId","synthetic":true,"types":[]},{"text":"impl Send for MessagingProtocolVersion","synthetic":true,"types":[]},{"text":"impl Send for HandshakeError","synthetic":true,"types":[]},{"text":"impl Send for ParsingErrorType","synthetic":true,"types":[]},{"text":"impl Send for RpcRequest","synthetic":true,"types":[]},{"text":"impl Send for RpcResponse","synthetic":true,"types":[]},{"text":"impl Send for DirectSendMsg","synthetic":true,"types":[]},{"text":"impl&lt;TReadSocket&gt; Send for NetworkMessageStream&lt;TReadSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TReadSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TWriteSocket&gt; Send for NetworkMessageSink&lt;TWriteSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TWriteSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NetworkMessage","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for NotSupportedType","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl Send for WriteError","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl Send for ConnectionMetadata","synthetic":true,"types":[]},{"text":"impl&lt;TSocket&gt; Send for Connection&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TTransport&gt; Send for DiemNetTransport&lt;TTransport&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTransport: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TrustLevel","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadOnlyTestSocket&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadOnlyTestSocketVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadWriteTestSocket&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["network_builder"] = [{"text":"impl Send for NetworkBuilder","synthetic":true,"types":[]},{"text":"impl Send for DummyMsg","synthetic":true,"types":[]},{"text":"impl Send for DummyNetworkSender","synthetic":true,"types":[]},{"text":"impl Send for DummyNetwork","synthetic":true,"types":[]}];
implementors["network_simple_onchain_discovery"] = [{"text":"impl Send for ConfigurationChangeListener","synthetic":true,"types":[]},{"text":"impl Send for ConfigurationChangeListenerBuilder","synthetic":true,"types":[]}];
implementors["proxy"] = [{"text":"impl Send for Proxy","synthetic":true,"types":[]}];
implementors["resource_viewer"] = [{"text":"impl Send for AnnotatedAccountStateBlob","synthetic":true,"types":[]},{"text":"impl Send for AnnotatedMoveStruct","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for MoveValueAnnotator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NullStateView","synthetic":true,"types":[]},{"text":"impl Send for AnnotatedMoveValue","synthetic":true,"types":[]}];
implementors["safety_rules"] = [{"text":"impl Send for ConsensusState","synthetic":true,"types":[]},{"text":"impl Send for PersistentSafetyStorage","synthetic":true,"types":[]},{"text":"impl Send for Process","synthetic":true,"types":[]},{"text":"impl Send for SafetyRules","synthetic":true,"types":[]},{"text":"impl Send for SafetyRulesManager","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["schemadb"] = [{"text":"impl Send for SchemaBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for SchemaIterator&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DB","synthetic":true,"types":[]},{"text":"impl Send for ScanDirection","synthetic":true,"types":[]}];
implementors["scratchpad"] = [{"text":"impl&lt;V&gt; Send for SparseMerkleTree&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for AccountStatus&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["short_hex_str"] = [{"text":"impl Send for ShortHexStr","synthetic":true,"types":[]},{"text":"impl Send for InputTooShortError","synthetic":true,"types":[]}];
implementors["socket_bench_server"] = [{"text":"impl Send for Args","synthetic":true,"types":[]}];
implementors["state_sync"] = [{"text":"impl Send for StateSyncBootstrapper","synthetic":true,"types":[]},{"text":"impl Send for GetChunkRequest","synthetic":true,"types":[]},{"text":"impl Send for TargetType","synthetic":true,"types":[]},{"text":"impl Send for GetChunkResponse","synthetic":true,"types":[]},{"text":"impl Send for ResponseLedgerInfo","synthetic":true,"types":[]},{"text":"impl Send for SyncRequest","synthetic":true,"types":[]},{"text":"impl Send for CommitNotification","synthetic":true,"types":[]},{"text":"impl Send for StateSyncClient","synthetic":true,"types":[]},{"text":"impl Send for CoordinatorMessage","synthetic":true,"types":[]},{"text":"impl Send for SyncState","synthetic":true,"types":[]},{"text":"impl Send for StateSyncSender","synthetic":true,"types":[]},{"text":"impl Send for StateSyncMessage","synthetic":true,"types":[]}];
implementors["storage_client"] = [{"text":"impl Send for StorageClient","synthetic":true,"types":[]}];
implementors["storage_interface"] = [{"text":"impl Send for StartupInfo","synthetic":true,"types":[]},{"text":"impl Send for TreeState","synthetic":true,"types":[]},{"text":"impl Send for DbReaderWriter","synthetic":true,"types":[]},{"text":"impl Send for GetAccountStateWithProofByVersionRequest","synthetic":true,"types":[]},{"text":"impl Send for SaveTransactionsRequest","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Order","synthetic":true,"types":[]},{"text":"impl Send for StorageRequest","synthetic":true,"types":[]},{"text":"impl Send for MockDbReader","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VerifiedStateView&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["storage_service"] = [{"text":"impl Send for StorageService","synthetic":true,"types":[]}];
implementors["subscription_service"] = [{"text":"impl&lt;T, U&gt; Send for SubscriptionService&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionBundle","synthetic":true,"types":[]}];
implementors["swiss_knife"] = [{"text":"impl Send for Response","synthetic":true,"types":[]}];
implementors["test_generation"] = [{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for AbstractValue","synthetic":true,"types":[]},{"text":"impl Send for CallGraph","synthetic":true,"types":[]},{"text":"impl Send for InstantiableModule","synthetic":true,"types":[]},{"text":"impl Send for AbstractState","synthetic":true,"types":[]},{"text":"impl Send for BorrowState","synthetic":true,"types":[]},{"text":"impl Send for Mutability","synthetic":true,"types":[]},{"text":"impl Send for BorrowGraph","synthetic":true,"types":[]},{"text":"impl Send for EdgeType","synthetic":true,"types":[]},{"text":"impl Send for FunctionGenerationContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytecodeGenerator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Args","synthetic":true,"types":[]},{"text":"impl Send for BasicBlock","synthetic":true,"types":[]},{"text":"impl Send for CFG","synthetic":true,"types":[]},{"text":"impl Send for VMError","synthetic":true,"types":[]},{"text":"impl !Send for Summary","synthetic":true,"types":[]},{"text":"impl !Send for Effects","synthetic":true,"types":[]},{"text":"impl Send for Subst","synthetic":true,"types":[]},{"text":"impl Send for StackBinOpResult","synthetic":true,"types":[]}];
implementors["transaction_builder_generated"] = [{"text":"impl Send for ScriptCall","synthetic":true,"types":[]}];
implementors["transaction_builder_generator"] = [{"text":"impl Send for Installer","synthetic":true,"types":[]},{"text":"impl Send for Installer","synthetic":true,"types":[]},{"text":"impl Send for Installer","synthetic":true,"types":[]},{"text":"impl Send for Installer","synthetic":true,"types":[]},{"text":"impl Send for Installer","synthetic":true,"types":[]}];
implementors["vm"] = [{"text":"impl Send for IndexKind","synthetic":true,"types":[]},{"text":"impl Send for SignatureTokenKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BoundsChecker&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Compatibility","synthetic":true,"types":[]},{"text":"impl Send for VMError","synthetic":true,"types":[]},{"text":"impl Send for PartialVMError","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for ModuleHandleIndex","synthetic":true,"types":[]},{"text":"impl Send for StructHandleIndex","synthetic":true,"types":[]},{"text":"impl Send for FunctionHandleIndex","synthetic":true,"types":[]},{"text":"impl Send for FieldHandleIndex","synthetic":true,"types":[]},{"text":"impl Send for StructDefInstantiationIndex","synthetic":true,"types":[]},{"text":"impl Send for FunctionInstantiationIndex","synthetic":true,"types":[]},{"text":"impl Send for FieldInstantiationIndex","synthetic":true,"types":[]},{"text":"impl Send for IdentifierIndex","synthetic":true,"types":[]},{"text":"impl Send for AddressIdentifierIndex","synthetic":true,"types":[]},{"text":"impl Send for ConstantPoolIndex","synthetic":true,"types":[]},{"text":"impl Send for SignatureIndex","synthetic":true,"types":[]},{"text":"impl Send for StructDefinitionIndex","synthetic":true,"types":[]},{"text":"impl Send for FunctionDefinitionIndex","synthetic":true,"types":[]},{"text":"impl Send for ModuleHandle","synthetic":true,"types":[]},{"text":"impl Send for StructHandle","synthetic":true,"types":[]},{"text":"impl Send for FunctionHandle","synthetic":true,"types":[]},{"text":"impl Send for FieldHandle","synthetic":true,"types":[]},{"text":"impl Send for StructDefInstantiation","synthetic":true,"types":[]},{"text":"impl Send for FunctionInstantiation","synthetic":true,"types":[]},{"text":"impl Send for FieldInstantiation","synthetic":true,"types":[]},{"text":"impl Send for StructDefinition","synthetic":true,"types":[]},{"text":"impl Send for FieldDefinition","synthetic":true,"types":[]},{"text":"impl Send for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl Send for TypeSignature","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SignatureTokenPreorderTraversalIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SignatureTokenPreorderTraversalIterWithDepth&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for CodeUnit","synthetic":true,"types":[]},{"text":"impl Send for CompiledScript","synthetic":true,"types":[]},{"text":"impl Send for CompiledScriptMut","synthetic":true,"types":[]},{"text":"impl Send for ScriptConversionInfo","synthetic":true,"types":[]},{"text":"impl Send for CompiledModule","synthetic":true,"types":[]},{"text":"impl Send for CompiledModuleMut","synthetic":true,"types":[]},{"text":"impl Send for StructFieldInformation","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for SignatureToken","synthetic":true,"types":[]},{"text":"impl Send for Bytecode","synthetic":true,"types":[]},{"text":"impl Send for BinaryConstants","synthetic":true,"types":[]},{"text":"impl Send for TableType","synthetic":true,"types":[]},{"text":"impl Send for SerializedType","synthetic":true,"types":[]},{"text":"impl Send for SerializedNominalResourceFlag","synthetic":true,"types":[]},{"text":"impl Send for SerializedKind","synthetic":true,"types":[]},{"text":"impl Send for SerializedNativeStructFlag","synthetic":true,"types":[]},{"text":"impl Send for Opcodes","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Struct","synthetic":true,"types":[]},{"text":"impl Send for FunctionSignature","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for CompiledModuleStrategyGen","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ModuleView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ModuleHandleView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StructHandleView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FunctionHandleView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StructDefinitionView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FieldDefinitionView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for LocalsSignatureView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FunctionDefinitionView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StructInstantiationView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FieldHandleView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FunctionInstantiationView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FieldInstantiationView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TypeSignatureView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SignatureView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SignatureTokenView&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["vm_genesis"] = [{"text":"impl Send for Validator","synthetic":true,"types":[]}];
implementors["vm_validator"] = [{"text":"impl Send for MockVMValidator","synthetic":true,"types":[]},{"text":"impl Send for VMValidator","synthetic":true,"types":[]}];
implementors["x_core"] = [{"text":"impl&lt;T&gt; Send for DebugIgnore&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for WorkspaceSubsets&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for WorkspaceSubset&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for XCoreContext","synthetic":true,"types":[]},{"text":"impl Send for SystemError","synthetic":true,"types":[]},{"text":"impl Send for WorkspaceStatus","synthetic":true,"types":[]},{"text":"impl Send for XCoreConfig","synthetic":true,"types":[]},{"text":"impl Send for SubsetConfig","synthetic":true,"types":[]}];
implementors["x_lint"] = [{"text":"impl&lt;'l, 'a&gt; Send for LintFormatter&lt;'l, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LintMessage","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for LintSource&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for RunStatus&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for SkipReason&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Send for LintLevel","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for LintKind&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for ContentContext&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for FilePathContext&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for PackageContext&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for ProjectContext&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; Send for LintEngineConfig&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; Send for LintEngine&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for LintResults&lt;'l&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()